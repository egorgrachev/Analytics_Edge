RF_hardcore = randomForest(revenue ~ City.Group + Type, data = Train, ntree=500)
CART = rpart(revenue ~ . - Id-Date, data=Train, cp=0.84)
predCART = predict(CART, newdata=Test)
predRF = predict(RF, newdata=Test)
predRF_hardcore = predict(RF_hardcore, newdata=Test)
rmse(predCART, Test$revenue)
rmse(predRF, Test$revenue)
rmse(predRF_hardcore, Test$revenue)
spl = sample.split(data$Type, SplitRatio = 0.75)
Train = subset(data, spl == TRUE)
Test = subset(data, spl == FALSE)
cartGrid = expand.grid(.cp = seq(0.002,0.1,0.002))
#train(revenue ~ . - Id - Date, data=data, method="rpart", tuneGrid=cartGrid, cp=0.78)
RF = randomForest(revenue ~ . - Id-City-Date, data=Train, ntree=1500, maxnodex = 10)
RF_hardcore = randomForest(revenue ~ City.Group + Type, data = Train, ntree=1500)
CART = rpart(revenue ~ . - Id-Date, data=Train, cp=0.84)
predCART = predict(CART, newdata=Test)
predRF = predict(RF, newdata=Test)
predRF_hardcore = predict(RF_hardcore, newdata=Test)
rmse(predCART, Test$revenue)
rmse(predRF, Test$revenue)
rmse(predRF_hardcore, Test$revenue)
spl = sample.split(data$Type, SplitRatio = 0.75)
Train = subset(data, spl == TRUE)
Test = subset(data, spl == FALSE)
cartGrid = expand.grid(.cp = seq(0.002,0.1,0.002))
#train(revenue ~ . - Id - Date, data=data, method="rpart", tuneGrid=cartGrid, cp=0.78)
RF = randomForest(revenue ~ . - Id-City-Date, data=Train, ntree=1500, maxnodex = 10)
RF_hardcore = randomForest(revenue ~ City.Group + Type, data = Train, ntree=1500)
CART = rpart(revenue ~ . - Id-Date, data=Train, cp=0.84)
predCART = predict(CART, newdata=Test)
predRF = predict(RF, newdata=Test)
predRF_hardcore = predict(RF_hardcore, newdata=Test)
rmse(predCART, Test$revenue)
rmse(predRF, Test$revenue)
rmse(predRF_hardcore, Test$revenue)
importance(RF)
rmse(predCART, Test$revenue)
rmse(predRF, Test$revenue)
rmse(predRF_hardcore, Test$revenue)
RF_hardcore = randomForest(revenue ~ City.Group + Type, data = Train, ntree=1500, maxnodes = 10)
predRF_hardcore = predict(RF_hardcore, newdata=Test)
rmse(predRF_hardcore, Test$revenue)
RF_hardcore = randomForest(revenue ~ City.Group + Type, data = Train, ntree=1500, maxnodes = 10)
predRF_hardcore = predict(RF_hardcore, newdata=Test)
rmse(predRF_hardcore, Test$revenue)
importance(RF)
train(revenue ~ City.Group + Type, data=data, method="rpart", tuneGrid=cartGrid)
CART = rpart(revenue ~  City.Group + Type, data=Train, cp=0.004)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
cartGrid = expand.grid(.cp = seq(0.0001,0.01,0.0001))
train(revenue ~ City.Group + Type, data=data, method="rpart", tuneGrid=cartGrid)
CART = rpart(revenue ~  City.Group + Type, data=Train, cp=0.0085)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
prp(CART)
importance(RF)
cartGrid = expand.grid(.cp = seq(0.002,0.1,0.002))
train(revenue ~ City.Group + Type + P3 + P4, data=data, method="rpart", tuneGrid=cartGrid)
CART = rpart(revenue ~  City.Group + Type, data=Train, cp=0.034)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
CART = rpart(revenue ~  City.Group + Type, data=Train)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
prp(CART)
CART = rpart(revenue ~  City.Group + Type, data=Train, cp=0.034)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
spl = sample.split(data$Type, SplitRatio = 0.75)
Train = subset(data, spl == TRUE)
Test = subset(data, spl == FALSE)
CART = rpart(revenue ~  City.Group + Type, data=Train, cp=0.034)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
cartGrid = expand.grid(.cp = seq(0.002,0.1,0.002))
train(revenue ~ City.Group + Type + P3 + P4, data=data, method="rpart", tuneGrid=cartGrid)
train(revenue ~ City.Group + Type, data=data, method="rpart", tuneGrid=cartGrid)
train(revenue ~ City.Group + Type, data=data, method="rpart", tuneGrid=cartGrid)
train(revenue ~ City.Group + Type + P3 + P4, data=data, method="rpart", tuneGrid=cartGrid)
CART = rpart(revenue ~  City.Group + Type +P3 +P4, data=Train, cp=0.034)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
CART = rpart(revenue ~  City.Group + Type +P3 +P4, data=Train, cp=0.1)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
CART = rpart(revenue ~  City.Group + Type +P3 +P4, data=Train)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
CART = rpart(revenue ~  City.Group + Type, data=Train)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
prp(CART)
spl = sample.split(data$Type, SplitRatio = 0.9)
Train = subset(data, spl == TRUE)
Test = subset(data, spl == FALSE)
cartGrid = expand.grid(.cp = seq(0.002,0.1,0.002))
train(revenue ~ City.Group + Type + P3 + P4, data=data, method="rpart", tuneGrid=cartGrid)
CART = rpart(revenue ~  City.Group + Type, data=Train)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
prp(CART)
importance(RF)
CART = rpart(revenue ~  City.Group + Type, data=Train, cp=0.074)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
prp(CART)
CART = rpart(revenue ~  City.Group + Type + P3 + P4, data=Train, cp=0.074)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
prp(CART)
CART = rpart(revenue ~  City.Group + Type + P3 + P4, data=Train)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
prp(CART)
importance(RF)
RF = randomForest(revenue ~ . - Id-City-Date, data=data, ntree=1500)
importance(RF)
CART = rpart(revenue ~  City.Group + Type + P6+P29, data=Train)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
prp(CART)
train(revenue ~ City.Group + Type + P6+P29, data=data, method="rpart", tuneGrid=cartGrid)
CART = rpart(revenue ~  City.Group + Type + P6+P29, data=Train, cp = 0.092)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
prp(CART)
plot(data$reveue)
plot(data$revenue)
plot(sort(data$revenue)
)
plot(sort(log(data$revenue)))
plot(sort(ln(data$revenue)))
g
plot(sort(lg(data$revenue)))
plot(sort(log(data$revenue)))
log(3)
log(2.7)
plot(sort(log(data$revenue)))
plot(a)
a = sort(log(data$revenue))
plot(a)
a
summary(a)
a = subset(a, a > 14.4)
plot(a)
a = subset(a, a > 14.4 & a < 16.2)
plot(a)
data$logrevenue = log(data$revenue)
data$logrevenue = subset(data$logrevenue, data$logrevenue > 14.4 and data$logrevenue < 16.2)
data$logrevenue = subset(data$logrevenue, data$logrevenue > 14.4 & data$logrevenue < 16.2)
data$logrevenue = log(data$revenue)
data$logrevenue = subset(data$logrevenue, data$logrevenue > 14.4 & data$logrevenue < 16.2)
littledata = subset(data, data$logrevenue > 14.4 & data$logrevenue < 16.2)
littledata
sort(littledata, littledata$logrevenue)
littledata[order(littledata$logrevenue)]
plot(data$Date, data$logrevenue)
data$correctedlogrevenue = data$correctedlogrevenue - 14.4
data$logrevenue = log(data$revenue)
data$correctedlogrevenue = data$logrevenue - 14.4
rm(littledata)
plot(data$correctedlogrevenue)
data$correctedlogrevenue = data$logrevenue - 14
plot(data$correctedlogrevenue)
littledata = subset(data, data$logrevenue > 14.4 & data$logrevenue < 16.2)
littledata$correctedlogrevenue = littledata$logrevenue - 14.4
plot(littledata$correctedlogrevenue)
plot(littledata$Date, littledata$correctedlogrevenue)
a = littledata
rm(littledata)plot(littledata$Date, littledata$correctedlogrevenue)
rm(littledata)
plot(a$Type, a$correctedlogrevenue)
plot(a$P1, a$correctedlogrevenue)
plot(a$P2, a$correctedlogrevenue)
plot(a$P3, a$correctedlogrevenue)
plot(a$P4, a$correctedlogrevenue)
plot(a$P5, a$correctedlogrevenue)
plot(a$P6, a$correctedlogrevenue)
plot(a$P7, a$correctedlogrevenue)
plot(a$P8, a$correctedlogrevenue)
plot(a$P9, a$correctedlogrevenue)
plot(a$P10, a$correctedlogrevenue)
plot(a$P29, a$correctedlogrevenue)
plot(a$P26, a$correctedlogrevenue)
plot(a$P23, a$correctedlogrevenue)
plot(a$P1 + a$P2, a$correctedlogrevenue)
plot(a$P1 + a$P2+ a$P3, a$correctedlogrevenue)
plot(a$P1 + a$P2+ a$P3+ a$P4, a$correctedlogrevenue)
plot(a$P1 + a$P2+ a$P3+ a$P4+ a$P5, a$correctedlogrevenue)
plot(a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6, a$correctedlogrevenue)
plot(a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7, a$correctedlogrevenue)
plot(a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8, a$correctedlogrevenue)
plot(a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9, a$correctedlogrevenue)
plot(a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10, a$correctedlogrevenue)
plot(a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11, a$correctedlogrevenue)
plot(a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12, a$correctedlogrevenue)
plot(a$correctedlogrevenuea, $P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P25)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27+ a$P28)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27+ a$P28+ a$P29)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27+ a$P28+ a$P29+ a$P30)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27+ a$P28+ a$P29+ a$P30+ a$P31)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27+ a$P28+ a$P29+ a$P30+ a$P31+ a$P32)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27+ a$P28+ a$P29+ a$P30+ a$P31+ a$P32+ a$P33)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27+ a$P28+ a$P29+ a$P30+ a$P31+ a$P32+ a$P33+ a$P34)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27+ a$P28+ a$P29+ a$P30+ a$P31+ a$P32+ a$P33+ a$P34+ a$P35)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27+ a$P28+ a$P29+ a$P30+ a$P31+ a$P32+ a$P33+ a$P34+ a$P35+ a$P36)
plot(a$correctedlogrevenue, a$P1 + a$P2+ a$P3+ a$P4+ a$P5+ a$P6+ a$P7+ a$P8+ a$P9+ a$P10+ a$P11+ a$P12+ a$P13+ a$P14+ a$P15+ a$P16+ a$P17+ a$P18+ a$P19 + a$P20+ a$P21+ a$P22+ a$P23+ a$P24+ a$P26+ a$P27+ a$P28+ a$P29+ a$P30+ a$P31+ a$P32+ a$P33+ a$P34+ a$P35+ a$P36+ a$P37)
plot(a$correctedlogrevenue, a$P1 - a$P2)
plot(a$correctedlogrevenue, a$P1 * a$P2)
plot(a$correctedlogrevenue, a$P1 * a$P2 * a$P3)
plot(a$correctedlogrevenue, a$P1 * a$P2 * a$P3 * a$P4)
plot(a$correctedlogrevenue, a$P1 * a$P3 * a$P4)
a
a = a + 1
a
plot(a$correctedlogrevenue, a$P1 * a$P2)
plot(a$correctedlogrevenue, a$P1 * a$P2* a$P3)
plot(a$correctedlogrevenue, a$P1 * a$P2* a$P3* a$P4)
summary(a)
plot(a$correctedlogrevenue, a$P1 * a$P2* a$P3* a$P4* a$P5* a$P6* a$P7)
plot(a$correctedlogrevenue, a$P1 * a$P2* a$P3* a$P4* a$P5* a$P6* a$P7<500000)
plot(a$correctedlogrevenue, max(a$P1 * a$P2* a$P3* a$P4* a$P5* a$P6* a$P7, 500000)
)
plot(a$correctedlogrevenue, a$P1 * a$P2* a$P3* a$P4* a$P5* a$P6* a$P7)
plot(a$correctedlogrevenue)
rm(list=ls())
data = read.csv("Kaggle/Restaurant Revenue Prediction/train.csv")
test = read.csv("Kaggle/Restaurant Revenue Prediction/test.csv")
data$Date = as.Date(data$Open.Date, "%m/%d/%Y")
test$Date = as.Date(test$Open.Date, "%m/%d/%Y")
test$Open.Date = NULL
data$Open.Date = NULL
data$logrevenue = NULL
BC = subset(data, data$City.Group == "Big Cities")
OC = subset(data, data$City.Group == "Other")
BC_FC = subset(BC, BC$Type == "FC")
BC_IL = subset(BC, BC$Type == "IL")
OC_FC = subset(OC, OC$Type == "FC")
OC_IL = subset(OC, OC$Type == "IL")
plot(BC_FC$Date, BC_FC$logrevenue)
plot(BC_IL$Date, BC_IL$logrevenue)
plot(data$City.Group, data$logrevenue)
naiveBC = lm(revenue ~ . - Date - Id - City - Type - City.Group, data = data)
summary(naiveBC)
library(rpart)
library(rpart.plot)
library(randomForest)
library(caTools)
library(hydroGOF)
library(caret)
library(e1071)
data$logrevenue = log(data$revenue)
RF = randomForest(logrevenue ~ . - Id-City-Date-revenue, data=data, ntree=1500)
importance(RF)
Type
spl = sample.split(data$Type, SplitRatio = 0.9)
Train = subset(data, spl == TRUE)
Test = subset(data, spl == FALSE)
cartGrid = expand.grid(.cp = seq(0.002,0.1,0.002))
train(logrevenue ~ City.Group + Type + P6+P29 - revenue, data=data, method="rpart", tuneGrid=cartGrid)
spl = sample.split(data$Type, SplitRatio = 0.9)
train(logrevenue ~ City.Group + Type + P6+P29 - revenue, data=data, method="rpart", tuneGrid=cartGrid)
data = read.csv("Kaggle/Restaurant Revenue Prediction/bigtrain.csv")
test = read.csv("Kaggle/Restaurant Revenue Prediction/test.csv")
data = read.csv("Kaggle/Restaurant Revenue Prediction/bigtrain.csv")
test = read.csv("Kaggle/Restaurant Revenue Prediction/test.csv")
data$Date = as.Date(data$Open.Date, "%m/%d/%Y")
test$Date = as.Date(test$Open.Date, "%m/%d/%Y")
test$Open.Date = NULL
data$Open.Date = NULL
data$logrevenue = NULL
BC = subset(data, data$City.Group == "Big Cities")
OC = subset(data, data$City.Group == "Other")
BC_FC = subset(BC, BC$Type == "FC")
BC_IL = subset(BC, BC$Type == "IL")
OC_FC = subset(OC, OC$Type == "FC")
OC_IL = subset(OC, OC$Type == "IL")
plot(BC_FC$Date, BC_FC$logrevenue)
plot(BC_IL$Date, BC_IL$logrevenue)
plot(data$City.Group, data$logrevenue)
naiveBC = lm(revenue ~ . - Date - Id - City - Type - City.Group, data = data)
summary(naiveBC)
library(rpart)
library(rpart.plot)
library(randomForest)
library(caTools)
library(hydroGOF)
library(caret)
library(e1071)
data$logrevenue = log(data$revenue)
spl = sample.split(data$Type, SplitRatio = 0.9)
Train = subset(data, spl == TRUE)
Test = subset(data, spl == FALSE)
spl = sample.split(data$revenue, SplitRatio = 0.8)
Train = subset(data, spl == TRUE)
Test = subset(data, spl == FALSE)
cartGrid = expand.grid(.cp = seq(0.002,0.1,0.002))
train(logrevenue ~ City.Group + Type - revenue, data=data, method="rpart", tuneGrid=cartGrid)
CART = rpart(revenue ~  City.Group + Type -revenue, data=Train)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$revenue)
prp(CART)
CART = rpart(logrevenue ~  City.Group + Type -revenue, data=Train)
predCART = predict(CART, newdata=Test)
rmse(predCART, Test$logrevenue)
prp(CART)
CART = rpart(logrevenue ~  City.Group + Type -revenue, data=Train)
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
prp(CART)
CART = rpart(logrevenue ~  City.Group + Type -revenue, data=Train,cp=0.002)
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
prp(CART)
CART = rpart(logrevenue ~  City.Group + Type -revenue, data=Train,cp=0.02)
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
prp(CART)
CART = rpart(logrevenue ~  City.Group + Type -revenue, data=Train)
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
prp(CART)
CART = rpart(logrevenue ~  City.Group + Type -revenue, data=Train, method="anova")
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
prp(CART)
importance(RF)
CART = rpart(logrevenue ~  City.Group + Type +P28 -revenue, data=Train, method="anova")
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
prp(CART)
CART = rpart(logrevenue ~  . -revenue, data=Train, method="anova")
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
prp(CART)
predCART
rmse(exp(predCART), exp(Test$logrevenue))
train(logrevenue ~ .- revenue, data=data, method="rpart", tuneGrid=cartGrid)
CART = rpart(logrevenue ~  . -revenue, data=Train, method="anova",cp=0.002)
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
prp(CART)
spl = sample.split(data$revenue, SplitRatio = 0.8)
Train = subset(data, spl == TRUE)
Test = subset(data, spl == FALSE)
cartGrid = expand.grid(.cp = seq(0.002,0.1,0.002))
train(logrevenue ~ .- revenue, data=data, method="rpart", tuneGrid=cartGrid)
CART = rpart(logrevenue ~  . -revenue, data=Train, method="anova",cp=0.002)
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
prp(CART)
pred = predict(CART, newdata=test)
Train$revenue = NULL
CART = rpart(logrevenue ~  ., data=Train, method="anova")
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
pred = predict(CART, newdata=test)
CART = rpart(logrevenue ~  .-City-Id, data=Train, method="anova")
CART = rpart(logrevenue ~  .-City-id, data=Train, method="anova")
CART = rpart(logrevenue ~  .-City-Id, data=Train, method="anova")
CART = rpart(logrevenue ~  .-City, data=Train, method="anova")
Train$City = NULL
CART = rpart(logrevenue ~  ., data=Train, method="anova")
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
CART = rpart(logrevenue ~  .-Id, data=Train, method="anova")
predCART = predict(CART, newdata=Test)
rmse(exp(predCART), exp(Test$logrevenue))
prp(CART)
pred = predict(CART, newdata=test)
test$Type[test$Type=="MB"] = "IL"
pred = predict(CART, newdata=test)
ans = data.frame(test$Id, pred)
write.csv(ans, "Kaggle/Restaurant Revenue Prediction/result.csv", quote=FALSE, sep=",", col.names=FALSE, row.names=FALSE)
ans = data.frame(test$Id, exp(pred))
write.csv(ans, "Kaggle/Restaurant Revenue Prediction/result.csv", quote=FALSE, sep=",", col.names=FALSE, row.names=FALSE)
CART = rpart(logrevenue ~  .-Id, data=data, method="anova")
predCART = predict(CART, newdata=Test)
pred = predict(CART, newdata=test)
ans = data.frame(test$Id, exp(pred))
write.csv(ans, "Kaggle/Restaurant Revenue Prediction/result.csv", quote=FALSE, sep=",", col.names=FALSE, row.names=FALSE)
RF = randomForest(logrevenue ~ . - Id, data=data, ntree=15000)
data = read.csv("Kaggle/Restaurant Revenue Prediction/bigtrain.csv")
test = read.csv("Kaggle/Restaurant Revenue Prediction/test.csv")
data$Date = as.Date(data$Open.Date, "%m/%d/%Y")
test$Date = as.Date(test$Open.Date, "%m/%d/%Y")
test$Open.Date = NULL
data$Open.Date = NULL
data$logrevenue = NULL
BC = subset(data, data$City.Group == "Big Cities")
OC = subset(data, data$City.Group == "Other")
BC_FC = subset(BC, BC$Type == "FC")
BC_IL = subset(BC, BC$Type == "IL")
OC_FC = subset(OC, OC$Type == "FC")
OC_IL = subset(OC, OC$Type == "IL")
plot(BC_FC$Date, BC_FC$logrevenue)
plot(BC_IL$Date, BC_IL$logrevenue)
plot(data$City.Group, data$logrevenue)
naiveBC = lm(revenue ~ . - Date - Id - City - Type - City.Group, data = data)
summary(naiveBC)
library(rpart)
library(rpart.plot)
library(randomForest)
library(caTools)
library(hydroGOF)
library(caret)
library(e1071)
data$logrevenue = log(data$revenue)
RF = randomForest(logrevenue ~ . - Id-City-Date-revenue, data=data, ntree=1500)
RF_hardcore = randomForest(revenue ~ City.Group + Type, data = Train, ntree=1500, maxnodes = 10)
predRF = predict(RF, newdata=)
predRF_hardcore = predict(RF_hardcore, newdata=Test)
rmse(predRF, Test$revenue)
rmse(predRF_hardcore, Test$revenue)
Train$revenue = NULL
Train$City = NULL
spl = sample.split(data$revenue, SplitRatio = 0.8)
Train = subset(data, spl == TRUE)
Test = subset(data, spl == FALSE)
cartGrid = expand.grid(.cp = seq(0.002,0.1,0.002))
train(logrevenue ~ ., data=data, method="rpart", tuneGrid=cartGrid)
RF = randomForest(logrevenue ~ . - Id, data=data, ntree=15000)
rm(list=ls())
stocks = read.csv("StocksCluster.csv")
setwd("AnalyticsEdge/Unit 6/")
stocks = read.csv("StocksCluster.csv")
library(caret)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
summary(normTrain)
summary(normTest)
set.seed(144)
KMC = kmeans(normTrain, centers = 3)
str(KMC)
summary(KMC)
KMC = KMC$cluster
summary(KMC)
str(KMC)
KMC
table(KMC)
library(flexclust)
km.kcca = as.kcca(km, normTrain)
KMC = kmeans(normTrain, centers = 3)
library(flexclust)
KMC.kcca = as.kcca(KMC, normTrain)
clusterTrain = predict(KMC.kcca)
clusterTest = predict(KMC.kcca, newdata=normTest)
clusterTest
table(clusterTest)
stockTrain1 = subset(stocksTrain, clusterTrain == 1)
stockTrain2 = subset(stocksTrain, clusterTrain == 2)
stockTrain3 = subset(stocksTrain, clusterTrain == 3)
stockTest1 = subset(stocksTest, clusterTest == 1)
stockTest2 = subset(stocksTest, clusterTest == 2)
stockTest3 = subset(stocksTest, clusterTest == 3)
summary(stockTrain1)
summary(stockTrain2)
summary(stockTrain3)
StocksModel1 = glm(PositiveDec ~ ., data=stockTrain1, family="binomial")
prediction1 = predict(StocksModel1, newdata=stockTest1, type="response")
StocksModel2 = glm(PositiveDec ~ ., data=stockTrain2, family="binomial")
prediction2 = predict(StocksModel2, newdata=stockTest2, type="response")
StocksModel3 = glm(PositiveDec ~ ., data=stockTrain3, family="binomial")
prediction3 = predict(StocksModel3, newdata=stockTest3, type="response")
summary(StocksModel1)
summary(StocksModel2)
summary(StocksModel3)
table(stockTest1$PositiveDec, prediction1>0.5)
(30+774) / (30+471+23+774)
table(stockTest2$PositiveDec, prediction2>0.5)
(388+757) / (388+626+309+757)
table(stockTest3$PositiveDec, prediction3>0.5)
(49+13) / (49+13+13+21)
AllPredictions = c(prediction1, prediction2, prediction3)
AllTest = c(stockTest1$PositiveDec, stockTest2$PositiveDec, stockTest3$PositiveDec)
table(AllTest, AllPredictions)
table(AllTest, AllPredictions>0.5)
(467+1544) / (467+1110+353+1544)
